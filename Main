-- Roblox DaHood Aimbot Framework
-- Version 1.3 - Optimized for reliability and performance

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

-- Local references
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()

-- Framework core
local DaHoodAimbot = {
    Enabled = false,
    LockedTarget = nil,
    CurrentTarget = nil,
    VisualElements = {},
    Config = {
        UpdateRate = 100,  -- Hz
        DaHood = {
            PredictionMultiplier = 0.22,
            AimHeightOffset = 1.5,
            FOVRadius = 90,
            LockDistance = 150,
            HeadshotMode = true,
            HeadshotThreshold = 40,
            ShowFOV = true,
            ShowTarget = true,
            ShowTracer = true,
            SmoothAim = true,
            AimKey = "q",  -- Default toggle key
            ToggleMode = false  -- Toggle instead of hold
        }
    },
    Connections = {},
    UI = {
        MainFrame = nil,
        Minimized = false
    }
}

-- Utility functions
local function SafeCall(func, ...)
    local success, result = pcall(func, ...)
    if not success then
        warn("Aimbot Error: " .. tostring(result))
    end
    return result
end

local function IsPlayerValid(player)
    return player and player ~= LocalPlayer and player.Character and player.Character.Parent ~= nil
end

local function IsCharacterValid(character)
    return character and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0
end

local function GetCharacterPart(character, preferHead)
    if preferHead then
        return character:FindFirstChild("Head") or character:FindFirstChild("HumanoidRootPart")
    end
    return character:FindFirstChild("HumanoidRootPart")
end

-- Target acquisition system
function DaHoodAimbot.GetClosestTargetToCursor()
    if not LocalPlayer.Character then return nil end
    local rootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return nil end

    local closestPlayer, closestDistance = nil, math.huge
    local viewportSize = Camera.ViewportSize
    local screenCenter = Vector2.new(viewportSize.X / 2, viewportSize.Y / 2)
    local config = DaHoodAimbot.Config.DaHood

    for _, player in ipairs(Players:GetPlayers()) do
        if IsPlayerValid(player) then
            local character = player.Character
            if IsCharacterValid(character) then
                local targetRoot = character:FindFirstChild("HumanoidRootPart")
                if targetRoot then
                    local distToPlayer = (targetRoot.Position - rootPart.Position).Magnitude
                    if distToPlayer <= config.LockDistance then
                        -- Headshot priority system
                        local preferHead = config.HeadshotMode and distToPlayer <= config.HeadshotThreshold
                        local targetPart = GetCharacterPart(character, preferHead)
                        
                        if targetPart then
                            local screenPos, onScreen = Camera:WorldToViewportPoint(targetPart.Position)
                            if onScreen then
                                local screenPoint = Vector2.new(screenPos.X, screenPos.Y)
                                local cursorDistance = (screenPoint - screenCenter).Magnitude
                                
                                -- Dynamic FOV scaling
                                local effectiveFOV = config.FOVRadius * math.clamp(1 - (distToPlayer / 200), 0.3, 1)
                                
                                if cursorDistance < closestDistance and cursorDistance <= effectiveFOV then
                                    closestDistance = cursorDistance
                                    closestPlayer = player
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    return closestPlayer
end

-- Aiming systems
function DaHoodAimbot.LockOntoTarget(target)
    if not DaHoodAimbot.Enabled or not target or not target.Character then return end
    
    local character = target.Character
    if not IsCharacterValid(character) then return end
    
    local config = DaHoodAimbot.Config.DaHood
    local preferHead = config.HeadshotMode and 
        ((character:FindFirstChild("Head") and 
        (character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= config.HeadshotThreshold)
    
    local targetPart = GetCharacterPart(character, preferHead)
    if not targetPart then return end
    
    -- Calculate prediction
    local velocity = targetPart.Velocity
    local predictionMultiplier = config.PredictionMultiplier
    local speed = velocity.Magnitude
    
    -- Dynamic prediction adjustment
    if speed > 30 then
        predictionMultiplier = predictionMultiplier + (speed / 100) * 0.15
    end
    
    -- Apply height offset for headshots
    local predictedPos = targetPart.Position + velocity * predictionMultiplier
    if preferHead then
        predictedPos = predictedPos + Vector3.new(0, config.AimHeightOffset, 0)
    end
    
    -- Direct camera lock
    Camera.CFrame = CFrame.new(Camera.CFrame.Position, predictedPos)
end

function DaHoodAimbot.SmoothLockOntoTarget(target)
    if not DaHoodAimbot.Enabled or not target or not target.Character then return end
    
    local character = target.Character
    if not IsCharacterValid(character) then return end
    
    local config = DaHoodAimbot.Config.DaHood
    local preferHead = config.HeadshotMode and 
        ((character:FindFirstChild("Head") and 
        (character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= config.HeadshotThreshold)
    
    local targetPart = GetCharacterPart(character, preferHead)
    if not targetPart then return end
    
    -- Calculate prediction
    local velocity = targetPart.Velocity
    local predictionMultiplier = config.PredictionMultiplier
    local speed = velocity.Magnitude
    
    -- Dynamic prediction adjustment
    if speed > 25 then
        predictionMultiplier = predictionMultiplier + (speed / 80) * 0.1
    end
    
    -- Apply height offset for headshots
    local predictedPos = targetPart.Position + velocity * predictionMultiplier
    if preferHead then
        predictedPos = predictedPos + Vector3.new(0, config.AimHeightOffset, 0)
    end
    
    -- Smooth camera transition
    local targetCF = CFrame.new(Camera.CFrame.Position, predictedPos)
    Camera.CFrame = Camera.CFrame:Lerp(targetCF, 0.35)
end

-- Visual system
function DaHoodAimbot.CreateVisuals()
    -- Cleanup existing visuals
    DaHoodAimbot.DestroyVisuals()
    
    local config = DaHoodAimbot.Config.DaHood
    local visuals = {}
    
    -- FOV Circle
    if config.ShowFOV then
        visuals.FOVCircle = Drawing.new("Circle")
        visuals.FOVCircle.Visible = true
        visuals.FOVCircle.Transparency = 0.7
        visuals.FOVCircle.Color = Color3.fromRGB(255, 50, 50)
        visuals.FOVCircle.Thickness = 1
        visuals.FOVCircle.Filled = false
        visuals.FOVCircle.Radius = config.FOVRadius
        visuals.FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    end
    
    -- Target Dot
    if config.ShowTarget then
        visuals.TargetDot = Drawing.new("Circle")
        visuals.TargetDot.Visible = false
        visuals.TargetDot.Color = Color3.fromRGB(0, 255, 0)
        visuals.TargetDot.Thickness = 2
        visuals.TargetDot.Radius = 6
        visuals.TargetDot.Filled = true
    end
    
    -- Tracer Line
    if config.ShowTracer then
        visuals.TracerLine = Drawing.new("Line")
        visuals.TracerLine.Visible = false
        visuals.TracerLine.Thickness = 1
        visuals.TracerLine.Color = Color3.fromRGB(255, 50, 50)
    end
    
    DaHoodAimbot.VisualElements = visuals
end

function DaHoodAimbot.UpdateVisuals()
    local config = DaHoodAimbot.Config.DaHood
    local visuals = DaHoodAimbot.VisualElements
    
    -- Update FOV Circle
    if visuals.FOVCircle then
        visuals.FOVCircle.Visible = config.ShowFOV and DaHoodAimbot.Enabled
        visuals.FOVCircle.Radius = config.FOVRadius
        visuals.FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    end
    
    -- Update target dot and tracer
    local showTarget = config.ShowTarget and DaHoodAimbot.Enabled
    local showTracer = config.ShowTracer and DaHoodAimbot.Enabled
    
    if visuals.TargetDot then
        visuals.TargetDot.Visible = false
    end
    if visuals.TracerLine then
        visuals.TracerLine.Visible = false
    end
    
    local currentTarget = DaHoodAimbot.LockedTarget or DaHoodAimbot.CurrentTarget
    if currentTarget and DaHoodAimbot.Enabled and currentTarget.Character then
        local targetPart = GetCharacterPart(currentTarget.Character, config.HeadshotMode)
        if targetPart then
            local screenPos, onScreen = Camera:WorldToViewportPoint(targetPart.Position)
            if onScreen then
                -- Update target dot
                if visuals.TargetDot and showTarget then
                    visuals.TargetDot.Position = Vector2.new(screenPos.X, screenPos.Y)
                    visuals.TargetDot.Visible = true
                end
                
                -- Update tracer line
                if visuals.TracerLine and showTracer then
                    visuals.TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                    visuals.TracerLine.To = Vector2.new(screenPos.X, screenPos.Y)
                    visuals.TracerLine.Visible = true
                end
            end
        end
    end
end

function DaHoodAimbot.DestroyVisuals()
    for _, element in pairs(DaHoodAimbot.VisualElements) do
        if element then
            element:Remove()
        end
    end
    DaHoodAimbot.VisualElements = {}
end

-- Input handling
function DaHoodAimbot.HandleAimKey()
    local config = DaHoodAimbot.Config.DaHood
    
    if config.ToggleMode then
        if UserInputService:IsKeyDown(Enum.KeyCode[config.AimKey:upper()]) then
            if not DaHoodAimbot.KeyPressed then
                DaHoodAimbot.Enabled = not DaHoodAimbot.Enabled
                DaHoodAimbot.KeyPressed = true
            end
        else
            DaHoodAimbot.KeyPressed = false
        end
    else
        DaHoodAimbot.Enabled = UserInputService:IsKeyDown(Enum.KeyCode[config.AimKey:upper()])
    end
end

-- Main update loop
function DaHoodAimbot.Update()
    SafeCall(function()
        -- Handle input
        DaHoodAimbot.HandleAimKey()
        
        -- Find and lock onto target
        if DaHoodAimbot.Enabled then
            DaHoodAimbot.CurrentTarget = DaHoodAimbot.GetClosestTargetToCursor()
            if DaHoodAimbot.CurrentTarget then
                if DaHoodAimbot.Config.DaHood.SmoothAim then
                    DaHoodAimbot.SmoothLockOntoTarget(DaHoodAimbot.CurrentTarget)
                else
                    DaHoodAimbot.LockOntoTarget(DaHoodAimbot.CurrentTarget)
                end
                DaHoodAimbot.LockedTarget = DaHoodAimbot.CurrentTarget
            end
        else
            DaHoodAimbot.CurrentTarget = nil
            DaHoodAimbot.LockedTarget = nil
        end
        
        -- Update visuals
        DaHoodAimbot.UpdateVisuals()
    end)
end

-- UI System
function DaHoodAimbot.CreateUI()
    -- Create main screen GUI
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "DaHoodAimbotUI"
    screenGui.Parent = game.CoreGui
    screenGui.ResetOnSpawn = false
    
    -- Main frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 300, 0, 350)
    mainFrame.Position = UDim2.new(0.5, -150, 0.5, -175)
    mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
    mainFrame.BackgroundTransparency = 0.2
    mainFrame.BorderSizePixel = 0
    mainFrame.ClipsDescendants = true
    mainFrame.Parent = screenGui
    
    -- Title bar
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Size = UDim2.new(1, 0, 0, 30)
    titleBar.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
    titleBar.BorderSizePixel = 0
    titleBar.Parent = mainFrame
    
    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Size = UDim2.new(0.7, 0, 1, 0)
    title.BackgroundTransparency = 1
    title.Text = "DaHood Aimbot v1.3"
    title.TextColor3 = Color3.fromRGB(220, 220, 220)
    title.TextSize = 16
    title.Font = Enum.Font.GothamBold
    title.Parent = titleBar
    
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 30, 1, 0)
    closeButton.Position = UDim2.new(1, -30, 0, 0)
    closeButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    closeButton.Text = "X"
    closeButton.TextColor3 = Color3.white
    closeButton.TextSize = 14
    closeButton.Font = Enum.Font.GothamBold
    closeButton.Parent = titleBar
    
    -- Minimize button
    local minButton = Instance.new("TextButton")
    minButton.Name = "MinimizeButton"
    minButton.Size = UDim2.new(0, 30, 1, 0)
    minButton.Position = UDim2.new(1, -60, 0, 0)
    minButton.BackgroundColor3 = Color3.fromRGB(80, 80, 100)
    minButton.Text = "_"
    minButton.TextColor3 = Color3.white
    minButton.TextSize = 14
    minButton.Font = Enum.Font.GothamBold
    minButton.Parent = titleBar
    
    -- Settings container
    local settingsContainer = Instance.new("ScrollingFrame")
    settingsContainer.Name = "SettingsContainer"
    settingsContainer.Size = UDim2.new(1, -20, 1, -50)
    settingsContainer.Position = UDim2.new(0, 10, 0, 40)
    settingsContainer.BackgroundTransparency = 1
    settingsContainer.BorderSizePixel = 0
    settingsContainer.ScrollBarThickness = 5
    settingsContainer.CanvasSize = UDim2.new(0, 0, 0, 600)
    settingsContainer.Parent = mainFrame
    
    -- Create settings controls
    local yOffset = 10
    local function CreateControl(label, defaultValue, callback, isBool)
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(1, 0, 0, 30)
        frame.Position = UDim2.new(0, 0, 0, yOffset)
        frame.BackgroundTransparency = 1
        frame.Parent = settingsContainer
        
        local labelText = Instance.new("TextLabel")
        labelText.Size = UDim2.new(0.6, 0, 1, 0)
        labelText.BackgroundTransparency = 1
        labelText.Text = label
        labelText.TextColor3 = Color3.fromRGB(220, 220, 220)
        labelText.TextSize = 14
        labelText.TextXAlignment = Enum.TextXAlignment.Left
        labelText.Font = Enum.Font.Gotham
        labelText.Parent = frame
        
        if isBool then
            local toggle = Instance.new("TextButton")
            toggle.Size = UDim2.new(0.3, 0, 0.7, 0)
            toggle.Position = UDim2.new(0.65, 0, 0.15, 0)
            toggle.BackgroundColor3 = defaultValue and Color3.fromRGB(50, 150, 50) or Color3.fromRGB(150, 50, 50)
            toggle.Text = defaultValue and "ON" or "OFF"
            toggle.TextColor3 = Color3.white
            toggle.TextSize = 12
            toggle.Font = Enum.Font.GothamBold
            toggle.Parent = frame
            
            toggle.MouseButton1Click:Connect(function()
                local newValue = not defaultValue
                defaultValue = newValue
                toggle.BackgroundColor3 = newValue and Color3.fromRGB(50, 150, 50) or Color3.fromRGB(150, 50, 50)
                toggle.Text = newValue and "ON" or "OFF"
                callback(newValue)
            end)
        else
            local textBox = Instance.new("TextBox")
            textBox.Size = UDim2.new(0.3, 0, 0.7, 0)
            textBox.Position = UDim2.new(0.65, 0, 0.15, 0)
            textBox.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
            textBox.Text = tostring(defaultValue)
            textBox.TextColor3 = Color3.white
            textBox.TextSize = 12
            textBox.Font = Enum.Font.Gotham
            textBox.Parent = frame
            
            textBox.FocusLost:Connect(function()
                local newValue = tonumber(textBox.Text) or defaultValue
                textBox.Text = tostring(newValue)
                callback(newValue)
            end)
        end
        
        yOffset = yOffset + 35
        settingsContainer.CanvasSize = UDim2.new(0, 0, 0, yOffset)
        return frame
    end
    
    -- Create settings controls
    local config = DaHoodAimbot.Config.DaHood
    
    CreateControl("Enabled", DaHoodAimbot.Enabled, function(val) 
        DaHoodAimbot.Enabled = val 
    end, true)
    
    CreateControl("Toggle Mode", config.ToggleMode, function(val) 
        config.ToggleMode = val 
    end, true)
    
    CreateControl("Aim Key", config.AimKey, function(val) 
        config.AimKey = val 
    end)
    
    CreateControl("Smooth Aim", config.SmoothAim, function(val) 
        config.SmoothAim = val 
    end, true)
    
    CreateControl("Headshot Mode", config.HeadshotMode, function(val) 
        config.HeadshotMode = val 
    end, true)
    
    CreateControl("Headshot Threshold", config.HeadshotThreshold, function(val) 
        config.HeadshotThreshold = val 
    end)
    
    CreateControl("Prediction Multiplier", config.PredictionMultiplier, function(val) 
        config.PredictionMultiplier = val 
    end)
    
    CreateControl("FOV Radius", config.FOVRadius, function(val) 
        config.FOVRadius = val 
    end)
    
    CreateControl("Lock Distance", config.LockDistance, function(val) 
        config.LockDistance = val 
    end)
    
    CreateControl("Height Offset", config.AimHeightOffset, function(val) 
        config.AimHeightOffset = val 
    end)
    
    CreateControl("Show FOV Circle", config.ShowFOV, function(val) 
        config.ShowFOV = val 
        DaHoodAimbot.CreateVisuals()
    end, true)
    
    CreateControl("Show Target Dot", config.ShowTarget, function(val) 
        config.ShowTarget = val 
        DaHoodAimbot.CreateVisuals()
    end, true)
    
    CreateControl("Show Tracer", config.ShowTracer, function(val) 
        config.ShowTracer = val 
        DaHoodAimbot.CreateVisuals()
    end, true)
    
    -- UI event handlers
    closeButton.MouseButton1Click:Connect(function()
        screenGui:Destroy()
        DaHoodAimbot.Shutdown()
    end)
    
    minButton.MouseButton1Click:Connect(function()
        if DaHoodAimbot.UI.Minimized then
            mainFrame.Size = UDim2.new(0, 300, 0, 350)
            DaHoodAimbot.UI.Minimized = false
        else
            mainFrame.Size = UDim2.new(0, 300, 0, 30)
            DaHoodAimbot.UI.Minimized = true
        end
    end)
    
    -- Make draggable
    local dragging = false
    local dragStart, frameStart
    
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            frameStart = mainFrame.Position
        end
    end)
    
    titleBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(
                frameStart.X.Scale, 
                frameStart.X.Offset + delta.X,
                frameStart.Y.Scale,
                frameStart.Y.Offset + delta.Y
            )
        end
    end)
    
    DaHoodAimbot.UI.MainFrame = mainFrame
end

-- Framework lifecycle
function DaHoodAimbot.Initialize()
    -- Create visuals
    DaHoodAimbot.CreateVisuals()
    
    -- Create UI
    DaHoodAimbot.CreateUI()
    
    -- Setup main loop
    local updateInterval = 1 / DaHoodAimbot.Config.UpdateRate
    local lastUpdate = time()
    
    table.insert(DaHoodAimbot.Connections, RunService.Heartbeat:Connect(function()
        if time() - lastUpdate >= updateInterval then
            DaHoodAimbot.Update()
            lastUpdate = time()
        end
    end))
    
    -- Cleanup on player leaving
    table.insert(DaHoodAimbot.Connections, LocalPlayer.CharacterRemoving:Connect(function()
        DaHoodAimbot.DestroyVisuals()
    end))
    
    print("DaHood Aimbot initialized successfully")
end

function DaHoodAimbot.Shutdown()
    -- Disable aimbot
    DaHoodAimbot.Enabled = false
    
    -- Cleanup visuals
    DaHoodAimbot.DestroyVisuals()
    
    -- Disconnect all connections
    for _, conn in ipairs(DaHoodAimbot.Connections) do
        conn:Disconnect()
    end
    DaHoodAimbot.Connections = {}
    
    print("DaHood Aimbot shutdown")
end

-- Initialize the framework
DaHoodAimbot.Initialize()
