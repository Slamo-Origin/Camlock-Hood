-- DaHood Mobile Aimbot with Target Locking
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera
local CoreGui = game:GetService("CoreGui")

-- Local player reference
local LocalPlayer = Players.LocalPlayer

-- Configuration
local Config = {
    Enabled = true,
    FOV = 120,
    Smoothness = 0.25,
    Prediction = 0.165,
    HeadshotMode = true,
    MaxDistance = 300,
    LockedTarget = nil  -- Stores locked player
}

-- Create mobile GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = CoreGui
ScreenGui.Name = "MobileAimbotUI"

local ToggleButton = Instance.new("TextButton")
ToggleButton.Size = UDim2.new(0.2, 0, 0.1, 0)
ToggleButton.Position = UDim2.new(0.75, 0, 0.85, 0)
ToggleButton.Text = "AIM: ON"
ToggleButton.BackgroundColor3 = Color3.fromRGB(50, 150, 50)
ToggleButton.TextColor3 = Color3.new(1, 1, 1)
ToggleButton.Font = Enum.Font.GothamBold
ToggleButton.TextScaled = true
ToggleButton.Parent = ScreenGui

-- Lock indicator
local LockIndicator = Drawing.new("Circle")
LockIndicator.Visible = false
LockIndicator.Color = Color3.fromRGB(0, 255, 0)
LockIndicator.Thickness = 2
LockIndicator.Radius = 8
LockIndicator.Filled = false

-- FOV circle
local FOVCircle = Drawing.new("Circle")
FOVCircle.Visible = true
FOVCircle.Transparency = 0.7
FOVCircle.Color = Color3.fromRGB(255, 50, 50)
FOVCircle.Thickness = 1
FOVCircle.Filled = false

-- Toggle button functionality
ToggleButton.MouseButton1Click:Connect(function()
    Config.Enabled = not Config.Enabled
    ToggleButton.Text = Config.Enabled and "AIM: ON" or "AIM: OFF"
    ToggleButton.BackgroundColor3 = Config.Enabled 
        and Color3.fromRGB(50, 150, 50) 
        or Color3.fromRGB(150, 50, 50)
    
    -- Clear lock when disabled
    if not Config.Enabled then
        Config.LockedTarget = nil
        LockIndicator.Visible = false
    end
end)

-- Core functions
local function IsTargetValid(player)
    if not player then return false end
    if not player.Character then return false end
    
    local character = player.Character
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid or humanoid.Health <= 0 then return false end
    
    local targetPart = Config.HeadshotMode and character:FindFirstChild("Head") or character:FindFirstChild("HumanoidRootPart")
    if not targetPart then return false end
    
    -- Distance check
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local distance = (targetPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
        if distance > Config.MaxDistance then return false end
    end
    
    return true
end

local function GetClosestTarget()
    -- If we have a valid locked target, keep it
    if Config.LockedTarget and IsTargetValid(Config.LockedTarget) then
        return Config.LockedTarget
    end
    
    -- Otherwise find new target
    Config.LockedTarget = nil
    LockIndicator.Visible = false
    
    if not LocalPlayer.Character then return nil end
    local localRoot = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not localRoot then return nil end
    
    local closestPlayer, closestDist = nil, Config.FOV
    local screenCenter = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)
    
    for _, player in ipairs(Players:GetPlayers()) do
        if player == LocalPlayer then continue end
        if not IsTargetValid(player) then continue end
        
        local character = player.Character
        local targetPart = Config.HeadshotMode and character:FindFirstChild("Head") or character:FindFirstChild("HumanoidRootPart")
        
        -- Screen position check
        local screenPos = Camera:WorldToViewportPoint(targetPart.Position)
        if screenPos.Z <= 0 then continue end
        
        local screenPoint = Vector2.new(screenPos.X, screenPos.Y)
        local distance = (screenPoint - screenCenter).Magnitude
        
        if distance < closestDist then
            closestDist = distance
            closestPlayer = player
        end
    end
    
    -- Lock onto new target
    if closestPlayer then
        Config.LockedTarget = closestPlayer
        LockIndicator.Visible = true
    end
    
    return closestPlayer
end

local function AimAtTarget()
    if not Config.Enabled then return end
    
    local target = GetClosestTarget()
    if not target or not target.Character then return end
    
    local character = target.Character
    local targetPart = Config.HeadshotMode and character:FindFirstChild("Head") or character:FindFirstChild("HumanoidRootPart")
    if not targetPart then return end
    
    -- Apply prediction
    local predictedPos = targetPart.Position + (targetPart.Velocity * Config.Prediction)
    
    -- Update lock indicator position
    local screenPos = Camera:WorldToViewportPoint(targetPart.Position)
    if screenPos.Z > 0 then
        LockIndicator.Position = Vector2.new(screenPos.X, screenPos.Y)
    end
    
    -- Smooth aiming
    local targetCF = CFrame.new(Camera.CFrame.Position, predictedPos)
    Camera.CFrame = Camera.CFrame:Lerp(targetCF, Config.Smoothness)
end

-- Main loop
RunService.Heartbeat:Connect(function()
    -- Update FOV circle
    FOVCircle.Position = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)
    FOVCircle.Radius = Config.FOV
    
    -- Run aiming logic
    AimAtTarget()
    
    -- Auto-release invalid locks
    if Config.LockedTarget and not IsTargetValid(Config.LockedTarget) then
        Config.LockedTarget = nil
        LockIndicator.Visible = false
    end
end)

-- Cleanup
LocalPlayer.CharacterRemoving:Connect(function()
    FOVCircle:Remove()
    LockIndicator:Remove()
    ScreenGui:Destroy()
end)

-- Mobile adaptation
UserInputService.WindowFocusReleased:Connect(function()
    Config.Enabled = false
    ToggleButton.Text = "AIM: OFF"
    ToggleButton.BackgroundColor3 = Color3.fromRGB(150, 50, 50)
    Config.LockedTarget = nil
    LockIndicator.Visible = false
end)

print("Target-Lock Aimbot Loaded | Locks onto first valid target")
