-- In the CONFIG.DaHood section, update these values:
DaHood = {
  -- Increased prediction for more aggressive leading
  PredictionMultiplier = 0.22,  -- Increased from 0.15
  AimHeightOffset = 1.5,        -- Higher headshot probability
  
  -- Tighter targeting parameters
  FOVRadius = 90,               -- Reduced from 150 for precision
  LockDistance = 150,           -- Increased from 100
  
  -- Faster target acquisition
  HeadshotMode = true,          -- Always prioritize headshots
  HeadshotThreshold = 40,       -- Increased distance for headshots
  
  -- Visuals
  ShowFOV = true,
  ShowTarget = true,
  ShowTracer = true,            -- Added visual tracer
},

-- In the CONFIG section:
UpdateRate = 100,               -- Increased from 60 for smoother tracking

-- Replace the GetClosestTargetToCursor function with this more aggressive version:
GetClosestTargetToCursor = function()
  local closestPlayer = nil
  local closestDistance = math.huge
  local character = LocalPlayer.Character
  
  if not character or not character:FindFirstChild("HumanoidRootPart") then 
    return nil 
  end
  
  local rootPart = character.HumanoidRootPart
  local viewportSize = Camera.ViewportSize
  local screenCenter = Vector2.new(viewportSize.X/2, viewportSize.Y/2)

  for _, player in pairs(Players:GetPlayers()) do
    if player ~= LocalPlayer and player.Character then
      local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
      local targetRoot = player.Character:FindFirstChild("HumanoidRootPart")
      
      if humanoid and humanoid.Health > 0 and targetRoot then
        -- Prioritize head if exists and within headshot range
        local targetPart = player.Character:FindFirstChild("Head") or targetRoot
        local distToPlayer = (targetRoot.Position - rootPart.Position).Magnitude
        
        if distToPlayer <= CONFIG.DaHood.LockDistance then
          local screenPos, onScreen = Camera:WorldToViewportPoint(targetPart.Position)
          
          if onScreen then
            local screenPoint = Vector2.new(screenPos.X, screenPos.Y)
            local distToCursor = (screenPoint - screenCenter).Magnitude
            
            -- Aggressive FOV prioritization with distance scaling
            local effectiveFOV = CONFIG.DaHood.FOVRadius * (1 - math.clamp(distToPlayer/200, 0, 0.7))
            
            if distToCursor < closestDistance and distToCursor <= effectiveFOV then
              closestDistance = distToCursor
              closestPlayer = player
            end
          end
        end
      end
    end
  end

  return closestPlayer
end,

-- In the CameraSystem, update the lock functions:
LockOntoTarget = function(target)
  -- ... existing code ...
  local predictionMultiplier = CONFIG.DaHood.PredictionMultiplier
  
  -- Increase prediction when target is moving fast
  local speed = velocity.Magnitude
  if speed > 30 then
    predictionMultiplier = predictionMultiplier + (speed/100 * 0.15)
  end
  
  local predictedPos = targetPart.Position + velocity * predictionMultiplier
  -- ... rest of function ...
end,

SmoothLockOntoTarget = function(target)
  -- ... existing code ...
  local predictionMultiplier = CONFIG.DaHood.PredictionMultiplier
  
  -- Dynamic prediction based on speed
  local speed = velocity.Magnitude
  if speed > 25 then
    predictionMultiplier = predictionMultiplier + (speed/80 * 0.1)
  end
  
  local predictedPos = targetPart.Position + velocity * predictionMultiplier
  -- ... rest of function ...
  
  -- Increase lerp speed for more aggressive tracking
  Camera.CFrame = cameraCF:Lerp(targetCF, 0.35)  -- Increased from 0.2
end,

-- Add this new function for visual tracer:
CreateTracer = function()
  if Framework.TracerLine then Framework.TracerLine:Remove() end
  Framework.TracerLine = Drawing.new("Line")
  Framework.TracerLine.Visible = false
  Framework.TracerLine.Thickness = 1
  Framework.TracerLine.Color = Color3.fromRGB(255, 50, 50)
end,

-- Add to VisualSystem.Initialize():
if CONFIG.DaHood.ShowTracer then
  VisualSystem.CreateTracer()
end

-- Add to VisualSystem.Update():
-- Tracer visualization
if Framework.TracerLine then
  Framework.TracerLine.Visible = false
  local currentTarget = Framework.LockedTarget or Framework.CurrentTarget
  if currentTarget and Framework.Enabled then
    local targetPart = currentTarget.Character:FindFirstChild("Head") or 
                      currentTarget.Character:FindFirstChild("HumanoidRootPart")
    if targetPart then
      local screenPos, onScreen = Camera:WorldToViewportPoint(targetPart.Position)
      if onScreen then
        Framework.TracerLine.From = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)
        Framework.TracerLine.To = Vector2.new(screenPos.X, screenPos.Y)
        Framework.TracerLine.Visible = true
      end
    end
  end
end
